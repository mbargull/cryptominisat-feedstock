{% set name = "cryptominisat" %}
{% set version = "5.6.5" %}
{% set sha256 = "b2751f8380a59c4885bea4c297536f0af2230306b1458d3e6b78d6e29f37b9d2" %}
{% set build = 1 %}

package:
  name: cryptominisat-split
  version: {{ version }}

source:
  url: https://github.com/msoos/cryptominisat/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    - 0001-win32-disable-autolinking.patch
    - 0002-remove-debug-symbols.patch
    - 0003-pycryptosat-remove-quote-from-macro.patch
    - 0004-pycryptosat-add-missing-include.patch
    - 0005-win32-remove-runtime_library_dirs.patch  # [win]

build:
  number: {{ build }}
  skip: True  # [win and vc<14]

outputs:
  - name: libcryptominisat
    build:
      skip: True  # [win and vc<14]
      run_exports:
        - {{ pin_subpackage("libcryptominisat", max_pin="x.x") }}
    # win needs bat so that compiler activation scripts run
    script: install-lib.sh  # [unix]
    script: install-lib.bat  # [win]
    requirements:
      build:
        - {{ compiler("cxx") }}
        - cmake
        - make
      host:
        - zlib
      run:
    test:
      commands:
        - test -e $PREFIX/lib/libcryptominisat5.5.6.dylib    # [osx]
        - test -e $PREFIX/lib/libcryptominisat5.so.5.6       # [linux]
        - IF NOT EXIST %LIBRARY_BIN%\\libcryptominisat5.5.6.dll exit 1       # [win]
  - name: pycryptosat
    build:
      number: {{ build }}
      skip: True  # [win and vc<14]
    # win needs bat so that compiler activation scripts run
    script: install-py.sh   # [unix]
    script: install-py.bat  # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake >=3.12
      host:
        - python
        - setuptools
        - {{ pin_subpackage('libcryptominisat', exact=True) }}
        - zlib
      run:
        - python
        - {{ pin_subpackage('libcryptominisat', exact=True) }}
    test:
      imports:
        - pycryptosat
      commands:
        - |
          python -c '
          from pycryptosat import Solver
          s = Solver()
          s.add_clauses([(1,), (1, -1)])
          assert s.is_satisfiable()
          s.add_clauses([(1,), (-1,)])
          assert not s.is_satisfiable()
          '
  - name: cryptominisat
    # win needs bat so that compiler activation scripts run
    script: install-exec.sh   # [unix]
    script: install-exec.bat  # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
      host:
        - boost-cpp {{ boost }}
        - zlib
        - {{ pin_subpackage('libcryptominisat', exact=True) }}
      run:
        - boost-cpp {{ boost }}
        - {{ pin_subpackage('libcryptominisat', exact=True) }}
    test:
      commands:
        - echo -e '1 0\n-1 0' | cryptominisat5 | grep UNSATISFIABLE   # [unix]
        - echo -e '1 0\n1 -1 0' | cryptominisat5 | grep SATISFIABLE   # [unix]

about:
  home: https://github.com/msoos/cryptominisat
  license: MIT
  license_family: MIT
  license_file: LICENSE.txt
  summary: An advanced SAT Solver https://www.msoos.org
  description: An advanced SAT Solver https://www.msoos.org
  dev_url: https://github.com/msoos/cryptominisat

extra:
  recipe-maintainers:
    - gshiba
    - msoos
    - saraedum
